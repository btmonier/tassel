name: jDeploy CI with Gradle

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Read version from Gradle build file
        id: read_version
        run: |
          RAW=$(./gradlew printVersion -q)
          # tail -n1 will skip all those progress-bar lines
          VERSION=$(echo "$RAW" | tail -n1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew clean build -x test -x koverVerify

      - name: Create TASSEL "Standalone" distribution
        run: |
          mkdir -p dist/tassel-5-standalone
          cp -r build/libs/lib/ dist/tassel-5-standalone/
          cp build/libs/sTASSEL.jar dist/tassel-5-standalone/
          cp scripts/*.pl scripts/*.bat dist/tassel-5-standalone/

          cd dist/tassel-5-standalone

          for f in start_tassel.pl run_pipeline.pl; do
            sed -i.bak 's|push(@fl, "\$top/dist/sTASSEL.jar");|push(@fl, "\$top/sTASSEL.jar");|' "$f"
          done

          for f in start_tassel.bat run_pipeline.bat; do
            sed -i.bak 's|set CP=%TOP%\\dist\\sTASSEL.jar|set CP=%TOP%\\sTASSEL.jar|' "$f"
          done

          rm -f *.bak

      - name: Archive TASSEL Standalone (ZIP and TAR.GZ)
        run: |
          cd dist/tassel-5-standalone/
          zip -r ../tassel-5-standalone-v${VERSION}.zip .
          tar -czf ../tassel-5-standalone-v${VERSION}.tar.gz .

      - name: Extract changelog content from latest PR
        id: extract_changelog
        run: |
          # Get the latest merged PR
          LATEST_PR=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc" | \
                     jq -r '[.[] | select(.merged_at != null)][0]')

          PR_NUMBER=$(echo "$LATEST_PR" | jq -r '.number')
          PR_BODY=$(echo "$LATEST_PR" | jq -r '.body')

          # Extract content between BEGIN CHANGELOG and END CHANGELOG tags
          CHANGELOG_CONTENT=$(echo "$PR_BODY" | sed -n '/<!-- BEGIN CHANGELOG -->/,/<!-- END CHANGELOG -->/p' | grep -v "<!-- BEGIN CHANGELOG -->" | grep -v "<!-- END CHANGELOG -->")

          # Remove leading/trailing whitespace and empty lines
          CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed '/^$/d' | sed 's/^[ \t]*//')

          # Check if content is not empty
          if [ -z "$CHANGELOG_CONTENT" ]; then
            echo "No changelog content found in PR description, using default message"
            CHANGELOG_CONTENT="See commit history for changes in this release."
          fi

          # Export for template substitution
          export NOTES="$CHANGELOG_CONTENT"
          envsubst < .github/release_template.md > RELEASE_NOTES.md

      - name: Load processed release notes
        id: read_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat RELEASE_NOTES.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Upload Release Assets using GitHub CLI
        run: |
          gh release upload "v${VERSION}" \
            dist/tassel-5-standalone-v${VERSION}.zip \
            dist/tassel-5-standalone-v${VERSION}.tar.gz \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy app contents into project root for jDeploy
        run: cp -r dist/tassel-5-standalone/* .

      - name: Build App Installer Bundles
        uses: shannah/jdeploy@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename jDeploy installer files
        run: |
          for f in jdeploy/github-release-files/TASSEL_5.Installer-*; do
            # Extract platform and extension
            base=$(basename "$f")
            platform=$(echo "$base" | sed -E 's/^TASSEL_5\.Installer-([^@]+)@.*$/\1/')
            ext="${f##*.}"

            # Rename the file
            new_name="tassel-5-installer-${platform}v${VERSION}.${ext}"
            mv "$f" "jdeploy/github-release-files/${new_name}"
          done

      - name: Upload jDeploy Installers to Existing Release
        run: |
          gh release upload "v${VERSION}" jdeploy/github-release-files/* --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
