/*
 * TASSEL - Trait Analysis by a aSSociation Evolution & Linkage
 * Copyright (C) 2003 Ed Buckler
 *
 * This software evaluates linkage disequilibrium nucletide diversity and 
 * associations. For more information visit http://www.maizegenetics.net
 *
 * This software is distributed under GNU general public license and without
 * any warranty ot technical support.
 *
 * You can redistribute and/or modify it under the terms of GNU General 
 * public license. 
 *
 */
package net.maizegenetics.baseplugins.geneplotter;

//import com.sun.image.codec.jpeg.JPEGCodec;
//import com.sun.image.codec.jpeg.JPEGEncodeParam;
//import com.sun.image.codec.jpeg.JPEGImageEncoder;
import javax.imageio.ImageIO;

import net.maizegenetics.pal.alignment.Alignment;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;

/**
 * Title:        TASSEL
 * Description:  A java program to deal with diversity
 * Copyright:    Copyright (c) 2000
 * Company:      USDA-ARS/NCSU
 * @author Ed Buckler
 * @version 1.0
 */
public class GeneDialog extends JFrame {

    BorderLayout borderLayout1 = new BorderLayout();
    private JDesktopPane desktopPane = new JDesktopPane();
    int MaxAllowedWindows = 5; // Including GenePaint Window
    DrawFrame[] drawframe = new DrawFrame[MaxAllowedWindows];
    OptionFrame optionframe;
    net.maizegenetics.pal.report.TableReport[] theTableSource;
    Alignment aa;
    JFrame mainFrame;
    boolean addwindow;
    int numberofwindows = 0;
    int width, height, trData = 0;

    public GeneDialog(JFrame frame, Alignment aa, net.maizegenetics.pal.report.TableReport[] tr) {
        super(" Gene Dialog : Gene  " + aa.getLocusName(0));
        enableEvents(AWTEvent.WINDOW_EVENT_MASK);
        this.aa = aa;
        this.theTableSource = tr;
        this.mainFrame = frame;

        try {
            jbInit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void jbInit() throws Exception {
        this.getContentPane().setLayout(borderLayout1);
        this.setContentPane(desktopPane);
        this.setSize(new Dimension(700, 500));
        height = this.getSize().height;
        width = this.getSize().width;

        optionframe = new OptionFrame(this, theTableSource);
        optionframe.setDoubleBuffered(true);
        optionframe.setBounds(0, 0, width, 50);
        optionframe.setVisible(true);
        optionframe.setResizable(true);
        desktopPane.add(optionframe, new Integer(1));
        height -= 50;
        drawframe[0] = new DrawFrame(mainFrame, aa, null, true, numberofwindows, this);
        drawframe[0].setDoubleBuffered(true);
        drawframe[0].setBounds(0, 50, width, height / MaxAllowedWindows);
        drawframe[0].setVisible(true);
        drawframe[0].setOpaque(true);
        drawframe[0].setResizable(true);
        desktopPane.add(drawframe[0], new Integer(2));
        numberofwindows = 1;
    }

    public void AddNewWindow() {
        if (theTableSource == null) {
            JOptionPane.showMessageDialog(null, "No Diversity Data", "Data Missing", JOptionPane.PLAIN_MESSAGE);
            return;
        }
        drawframe[numberofwindows] = new DrawFrame(mainFrame, aa, theTableSource[trData], false, numberofwindows, this);
        drawframe[numberofwindows].setDoubleBuffered(true);
        drawframe[numberofwindows].setBounds(0, 50 + height * numberofwindows / MaxAllowedWindows, width, height / MaxAllowedWindows);
        desktopPane.add(drawframe[numberofwindows], new Integer(2));
        drawframe[numberofwindows].setVisible(true);
        drawframe[numberofwindows].setOpaque(true);
        drawframe[numberofwindows].setResizable(true);
        numberofwindows += 1;
        if (numberofwindows == MaxAllowedWindows) {
            optionframe.disableAddWindowButton();
        }
    }

    public void WindowClosed() {
        numberofwindows -= 1;
        if (numberofwindows < MaxAllowedWindows) {
            optionframe.enableAddWindowButton();
        }
    }

    public void SettrData(int index) {
        trData = index;
    }

    public void SaveSVG() {
        // Get a DOMImplementation
        DOMImplementation domImpl =
                GenericDOMImplementation.getDOMImplementation();
        // Create an instance of org.w3c.dom.Document
        Document document = domImpl.createDocument(null, "svg", null);
        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
        //ctx.setComment("Generated by FooApplication with Batik SVG Generator");
        SVGGraphics2D g2d = new SVGGraphics2D(ctx, true);
        drawframe[0].genePanel.paint(g2d);
        for (int i = 1; i < numberofwindows; i++) {
            if (drawframe[i].graphPanel[i - 1] != null) {
                g2d.translate(0, 400);
                drawframe[i].graphPanel[i - 1].paint(g2d);
            }
        }

        // Finally, stream out SVG to the standard output using UTF-8
        // character to byte encoding
        boolean useCSS = true; // we want to use CSS style attribute
        try {
            FileDialog saveFileDialog;
            saveFileDialog = new FileDialog(mainFrame, "Save Image", FileDialog.SAVE);
            saveFileDialog.setFile("2d.svg");
            saveFileDialog.setVisible(true);
            File saveFile = new File(saveFileDialog.getDirectory(), saveFileDialog.getFile());
            if (saveFile == null) {
                return;
            }
            FileOutputStream fos = new FileOutputStream(saveFile);
            Writer out = new OutputStreamWriter(fos, "UTF-8");
            g2d.stream(out, useCSS);
            fos.flush();
            fos.close();
        } catch (Exception ee) {
            System.out.println(" Error with svg button " + ee);
        }
    }

    public void SaveJPG() {
        BufferedImage img;
        Dimension d = desktopPane.getSize(); //ldFigurePanel.getSize();
        img = (BufferedImage) createImage(d.width, d.height);
        Graphics gbox = img.getGraphics();
        drawframe[0].genePanel.paint(gbox);
        for (int i = 1; i < numberofwindows; i++) {
            gbox.translate(0, 400);
            drawframe[i].graphPanel[i - 1].paint(gbox);
        }
        //Create a fileoutputstream.
        //FileOutputStream fos;
        try {
            FileDialog saveFileDialog;
            saveFileDialog = new FileDialog(mainFrame, "Save Image", FileDialog.SAVE);
            saveFileDialog.setFile("genedialog.jpg");
            saveFileDialog.setVisible(true);
            File saveFile = new File(saveFileDialog.getDirectory(), saveFileDialog.getFile());
            if (saveFile == null) {
                return;
            }

            // Deprecated code replaced by ImageIo
            // Should be removed once we've decided no longer needed.
            //fos = new FileOutputStream(saveFile);
            //JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(fos);
            //JPEGEncodeParam params=encoder.getDefaultJPEGEncodeParam(img);
            //params.setQuality(1.0f,false);
            //encoder.encode(img,params);
            //fos.flush();
            //fos.close();

            ImageIO.write(img, "JPEG", saveFile);
        } catch (FileNotFoundException fe) {
            System.out.println(fe);
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }
}