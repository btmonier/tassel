package net.maizegenetics.pal.site;

import com.google.common.base.Preconditions;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

/**
 * Defines xxxx
 *
 * @author Ed Buckler
 */
public class PositionListBuilder {
    private final ArrayList<Position> contents = new ArrayList<Position>();

    /**
     * Creates a new builder. The returned builder is equivalent to the builder
     * generated by {@link }.
     */
    public PositionListBuilder() {}

    /**
     * Adds {@code element} to the {@code PositionList}.
     *
     * @param element the element to add
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code element} is null
     */
    public PositionListBuilder add(Position element) {
        Preconditions.checkNotNull(element, "element cannot be null");
        contents.add(element);
        return this;
    }

    /**
     * Adds each element of {@code elements} to the {@code PositionList}.
     *
     * @param elements the {@code Iterable} to add to the {@code PositionList}
     * @return this {@code Builder} object
     * @throws NullPointerException if {@code elements} is or contains null
     */
    public PositionListBuilder addAll(Iterable<? extends Position> elements) {
        if (elements instanceof Collection) {
            @SuppressWarnings("unchecked")
            Collection<? extends Position> collection = (Collection<? extends Position>) elements;
            contents.ensureCapacity(contents.size() + collection.size());
        }
        for (Position elem : elements) {
            Preconditions.checkNotNull(elem, "elements contains a null");
            contents.add(elem);
        }
        return this;
    }

    /*
    Returns whether List is already ordered.  Important to check this if genotype and sites are separately built, as the
     PositionArrayList must be sorted, and will be with build.
     */
    public boolean validateOrdering() {
        boolean result=true;
        Position startAP=contents.get(0);
        for (Position ap:contents) {
            if(ap.compareTo(startAP)<0) return false;
        }
        return result;
    }

    /**
     * Returns the size (number of positions) in the current list
     * @return current size
     */
    public int size() {
        return contents.size();
    }

    /**
     * Returns a newly-created {@code ImmutableList} based on the contents of
     * the {@code Builder}.
     */
    public PositionList build() {
        if(!validateOrdering()) {
            System.out.println("Beginning Sort of Position List");
            Collections.sort(contents);
            System.out.println("Finished Sort of Position List");
        }
        return new PositionArrayList(contents);
    }

}
